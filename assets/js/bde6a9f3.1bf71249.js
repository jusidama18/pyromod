"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[800],{6962:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>d});var i=n(5893),o=n(1151);const r={title:"Initialization",sidebar_position:3},s=void 0,a={id:"getting-started/initialization",title:"Initialization",description:"To initialize pyromod, on the file that creates the client instance, simply import the Client class from pyromod instead",source:"@site/docs/getting-started/initialization.md",sourceDirName:"getting-started",slug:"/getting-started/initialization",permalink:"/getting-started/initialization",draft:!1,unlisted:!1,editUrl:"https://github.com/usernein/pyromod/tree/master/docs/docs/getting-started/initialization.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Initialization",sidebar_position:3},sidebar:"gettingStartedSidebar",previous:{title:"Installation",permalink:"/getting-started/installation"},next:{title:"Configuration",permalink:"/getting-started/configuration"}},l={},d=[];function c(t){const e={admonition:"admonition",code:"code",p:"p",pre:"pre",...(0,o.a)(),...t.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.p,{children:"To initialize pyromod, on the file that creates the client instance, simply import the Client class from pyromod instead\nof pyrogram:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"from pyromod import Client\n"})}),"\n",(0,i.jsxs)(e.p,{children:["And that's all! You can still use the ",(0,i.jsx)(e.code,{children:"Client"})," class as you would normally do with Pyrogram, but now having all the\nextra features."]}),"\n",(0,i.jsx)(e.admonition,{type:"note",children:(0,i.jsxs)(e.p,{children:["You don't need to change the imports on the plugins files. Even by importing ",(0,i.jsx)(e.code,{children:"Client"})," from pyrogram, the pyromod  features will be available anyway."]})}),"\n",(0,i.jsx)(e.admonition,{type:"note",children:(0,i.jsxs)(e.p,{children:["In order to monkeyatch pyromod features successfully, it's just required that the  first ",(0,i.jsx)(e.code,{children:"Client"})," class imported to your project code should be from pyromod. Then all the other future ",(0,i.jsx)(e.code,{children:"Client"})," instances  will be patched automatically."]})}),"\n",(0,i.jsx)(e.admonition,{type:"note",children:(0,i.jsxs)(e.p,{children:["On custom plugins, you just need to import Client from pyromod if you want your IDE to recognize and suggest\nthe extra features based on ",(0,i.jsx)(e.code,{children:"pyromod.Client"})," type."]})})]})}function p(t={}){const{wrapper:e}={...(0,o.a)(),...t.components};return e?(0,i.jsx)(e,{...t,children:(0,i.jsx)(c,{...t})}):c(t)}},1151:(t,e,n)=>{n.d(e,{Z:()=>a,a:()=>s});var i=n(7294);const o={},r=i.createContext(o);function s(t){const e=i.useContext(r);return i.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function a(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(o):t.components||o:s(t.components),i.createElement(r.Provider,{value:e},t.children)}}}]);