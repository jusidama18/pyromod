"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[87],{4887:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var t=n(5893),o=n(1151);const i={title:"v3.1.0 (latest)",sidebar_position:0},r=void 0,a={id:"release-notes/v3-1-0",title:"v3.1.0 (latest)",description:"Breaking changes",source:"@site/docs/release-notes/v3-1-0.md",sourceDirName:"release-notes",slug:"/release-notes/v3-1-0",permalink:"/release-notes/v3-1-0",draft:!1,unlisted:!1,editUrl:"https://github.com/usernein/pyromod/tree/master/docs/docs/release-notes/v3-1-0.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{title:"v3.1.0 (latest)",sidebar_position:0},sidebar:"releaseNotesSidebar",next:{title:"v2.0.0",permalink:"/release-notes/v2-0-0"}},l={},c=[{value:"Breaking changes",id:"breaking-changes",level:2},{value:"Highlights of this release",id:"highlights-of-this-release",level:2},{value:"Other changes",id:"other-changes",level:2}];function d(e){const s={a:"a",code:"code",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h2,{id:"breaking-changes",children:"Breaking changes"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"Client.stop_listening"})," is now an async function, so you must await it if you're calling it on your code. If you don't use stop_listening, there is no breaking changes for you."]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"highlights-of-this-release",children:"Highlights of this release"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"register_next_step_handler"})," is finally here!\nA lot of people that asks for conversation handling on Pyrogram (and don't know pyromod yet) actually wants something ",(0,t.jsx)(s.a,{href:"https://github.com/eternnoir/pyTelegramBotAPI/blob/a3343fc59a7839f76df6034f365e90018d374e55/examples/step_example.py#L24-L74",children:"like pyTelegramBotApi does"})," with ",(0,t.jsx)(s.code,{children:"register_next_step_handler"}),". Well, finally you can use it in Pyrogram, with pyromod! And it's not based on Futures like ",(0,t.jsx)(s.code,{children:"listen"})," and ",(0,t.jsx)(s.code,{children:"ask"})," are, so those who don't like pyromod might like this new feature."]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["The difference from pyTelegramBotApi's approach is that with pyromod, your callback will actually receive the Client object and the received Message (or CallbackQuery). In pyTelegramBotApi, the callback receives only the Message. Also, you don't need to call any other function than ",(0,t.jsx)(s.code,{children:"register_next_step_handler"}),". You just call it passing your callback and that's all! Check the example below:"]}),"\n",(0,t.jsx)("img",{src:"https://github.com/usernein/pyromod/assets/29507335/52b8fc98-0633-49ab-8992-fa64c8a0e2d7",width:"600"}),"\n",(0,t.jsx)("img",{src:"https://github.com/usernein/pyromod/assets/29507335/d60cf1b1-2b43-4a14-83eb-58f05a64ba13",width:"500"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["Now pyromod accepts lists of values for ",(0,t.jsx)(s.code,{children:"chat_id"}),", ",(0,t.jsx)(s.code,{children:"user_id"}),", ",(0,t.jsx)(s.code,{children:"message_id"})," and ",(0,t.jsx)(s.code,{children:"inline_message_id"}),"."]}),"\n"]}),"\n",(0,t.jsx)("img",{src:"https://github.com/usernein/pyromod/assets/29507335/79f88fab-ab15-4467-bacd-102202888cfc",width:"500"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["Now pyromod accepts usernames for ",(0,t.jsx)(s.code,{children:"chat_id"})," and ",(0,t.jsx)(s.code,{children:"user_id"}),", so the example above could also be:"]}),"\n"]}),"\n",(0,t.jsx)("img",{src:"https://github.com/usernein/pyromod/assets/29507335/b48c4c3a-e275-4b29-b80f-ba2512f146d4",width:"500"}),"\n",(0,t.jsx)(s.h2,{id:"other-changes",children:"Other changes"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Thanks to @jusidama18 with #34, now pyromod will also work if you use sync filters."}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Full Changelog"}),": ",(0,t.jsx)(s.a,{href:"https://github.com/usernein/pyromod/compare/v3.0.0...v3.1.0",children:"https://github.com/usernein/pyromod/compare/v3.0.0...v3.1.0"})]})]})}function h(e={}){const{wrapper:s}={...(0,o.a)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},1151:(e,s,n)=>{n.d(s,{Z:()=>a,a:()=>r});var t=n(7294);const o={},i=t.createContext(o);function r(e){const s=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(i.Provider,{value:s},e.children)}}}]);